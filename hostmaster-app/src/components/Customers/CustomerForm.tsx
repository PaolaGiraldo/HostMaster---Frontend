import React, { useState, useEffect } from "react";

import { Modal, Button, Form } from "react-bootstrap";
import { useTranslation } from "react-i18next";
import { User } from "../../interfaces/userInterface";

interface ClientFormProps {
  show: boolean;
  onHide: () => void;
  onSave: (client: User) => void;
  editingClient?: User | null;
}

const ClientForm: React.FC<ClientFormProps> = ({
  show,
  onHide,
  onSave,
  editingClient,
}) => {
  const { t } = useTranslation();
  const [formData, setFormData] = useState<User>({
    firstname: "",
    lastname: "",
    email: "",
    username: "",
    full_name: "",
    role: "client",
    document_number: "",
    reviews: [],
    disabled: false,
  });

  // Cargar datos si estamos editando
  useEffect(() => {
    if (editingClient) {
      setFormData(editingClient);
    } else {
      setFormData({
        firstname: "",
        lastname: "",
        email: "",
        username: "",
        full_name: "",
        role: "client",
        document_number: "",
        reviews: [],
      });
    }
  }, [editingClient]);

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();

    const autoGeneratedUsername = generateUsername(
      formData.firstname,
      formData.lastname
    );
    const autoGeneratedPassword = generatePassword();

    const clientToSave: User = {
      ...formData,
      username: editingClient ? formData.username : autoGeneratedUsername,
      password: editingClient ? undefined : autoGeneratedPassword,
      full_name: `${formData.firstname} ${formData.lastname}`,
      role: "client",
      accommodation_ids: [],
      image: null,
    };

    onSave(clientToSave);
    onHide();

    setFormData({
      firstname: "",
      lastname: "",
      email: "",
      username: "",
      full_name: "",
      role: "client",
      document_number: "",
      reviews: [],
    });
  };

  return (
    <>
      <Modal show={show} onHide={onHide}>
        <Modal.Header closeButton>
          <Modal.Title>
            {editingClient ? t("clients.edit") : t("clients.new")}
          </Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form onSubmit={handleSubmit}>
            <Form.Group controlId="username">
              <Form.Label>{t("clients.username")}</Form.Label>
              <Form.Control
                type="text"
                name="username"
                value={formData.username}
                onChange={handleChange}
                required
              />
            </Form.Group>

            <Form.Group controlId="firstname">
              <Form.Label>{t("clients.firstname")}</Form.Label>
              <Form.Control
                type="text"
                name="firstname"
                value={formData.firstname}
                onChange={handleChange}
                required
              />
            </Form.Group>

            <Form.Group controlId="lastname">
              <Form.Label>{t("clients.lastname")}</Form.Label>
              <Form.Control
                type="text"
                name="lastname"
                value={formData.lastname}
                onChange={handleChange}
                required
              />
            </Form.Group>

            <Form.Group controlId="document_number">
              <Form.Label>{t("clients.document")}</Form.Label>
              <Form.Control
                type="text"
                name="document_number"
                value={formData.document_number}
                onChange={handleChange}
                required
              />
            </Form.Group>

            <Form.Group controlId="email">
              <Form.Label>{t("clients.email")}</Form.Label>
              <Form.Control
                type="text"
                name="email"
                value={formData.email}
                onChange={handleChange}
                required
              />
            </Form.Group>

            <div className="d-flex justify-content-end mt-3">
              <Button variant="secondary" onClick={onHide}>
                {t("cancel")}
              </Button>
              <Button variant="primary" type="submit" className="ms-2">
                {editingClient ? t("update") : t("save")}
              </Button>
            </div>
          </Form>
        </Modal.Body>
      </Modal>
    </>
  );
};

export default ClientForm;

function generateUsername(firstname: string, lastname: string): string {
  const random = Math.floor(Math.random() * 1000);
  return `${firstname.charAt(0)}${lastname}`.toLowerCase() + random;
}

function generatePassword(length = 10): string {
  const chars =
    "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%&*";
  return Array.from(
    { length },
    () => chars[Math.floor(Math.random() * chars.length)]
  ).join("");
}
